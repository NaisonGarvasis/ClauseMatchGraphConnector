using System.Text.Json.Nodes;
using CopilotChatClient;
using Microsoft.Teams.AI.Agents;
using Microsoft.Teams.AI.Agents.Hosting;
using Microsoft.Teams.AI.Agents.Model;

namespace ChatConsole;

public class ChatConsoleService
{
    private readonly AgentClient _agent;

    public ChatConsoleService(AgentClient agent)
    {
        _agent = agent;
    }

    public async Task RunAsync()
    {
        Console.WriteLine("Welcome to the Copilot Agent chat. Type 'exit' to quit.");

        while (true)
        {
            Console.Write("You: ");
            string input = Console.ReadLine();
            if (string.Equals(input, "exit", StringComparison.OrdinalIgnoreCase))
                break;

            var activityResponse = await _agent.SendMessageAsync(input, CancellationToken.None);

            while (activityResponse != null)
            {
                foreach (var activity in activityResponse.Activities)
                {
                    if (activity.Attachments?.Any() == true)
                    {
                        foreach (var attachment in activity.Attachments)
                        {
                            if (attachment.ContentType == "application/vnd.microsoft.card.adaptive")
                            {
                                Console.WriteLine("[Adaptive Card detected]");
                                var responseInputs = await HandleAdaptiveCardInputAsync(attachment.Content);
                                activityResponse = await _agent.SubmitResponseAsync(responseInputs, CancellationToken.None);
                                goto ContinueLoop;
                            }
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(activity.Text))
                    {
                        Console.WriteLine($"Agent: {activity.Text}");
                    }
                }

                activityResponse = null;

            ContinueLoop:
                continue;
            }
        }
    }

    private async Task<IDictionary<string, object>> HandleAdaptiveCardInputAsync(object content)
    {
        var inputs = new Dictionary<string, object>();
        var card = content as JsonObject ?? JsonNode.Parse(content?.ToString()) as JsonObject;

        if (card?["body"] is not JsonArray body)
        {
            Console.WriteLine("⚠️ No body found in Adaptive Card.");
            return inputs;
        }

        foreach (var item in body)
        {
            var type = item?["type"]?.ToString();
            var id = item?["id"]?.ToString();

            if (string.IsNullOrEmpty(id)) continue;

            switch (type)
            {
                case "Input.Text":
                    Console.Write($"{item?["placeholder"] ?? "Enter text"}: ");
                    inputs[id] = Console.ReadLine();
                    break;

                case "Input.ChoiceSet":
                    Console.WriteLine(item?["placeholder"]?.ToString() ?? "Choose an option:");
                    var choices = item?["choices"]?.AsArray();
                    if (choices != null)
                    {
                        var options = choices.Select(c => new
                        {
                            Title = c?["title"]?.ToString(),
                            Value = c?["value"]?.ToString()
                        }).ToList();

                        for (int i = 0; i < options.Count; i++)
                        {
                            Console.WriteLine($"  {i + 1}. {options[i].Title}");
                        }

                        Console.Write("Select number: ");
                        if (int.TryParse(Console.ReadLine(), out int selectedIndex) &&
                            selectedIndex >= 1 && selectedIndex <= options.Count)
                        {
                            inputs[id] = options[selectedIndex - 1].Value;
                        }
                    }
                    break;

                case "Input.Toggle":
                    Console.Write($"{item?["title"] ?? "Yes/No"} (yes/no): ");
                    var toggle = Console.ReadLine();
                    inputs[id] = toggle?.ToLowerInvariant() == "yes" ? "true" : "false";
                    break;
            }
        }

        return inputs;
    }
}
