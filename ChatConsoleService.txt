// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using Microsoft.Agents.Core.Models;
using Microsoft.Agents.CopilotStudio.Client;
using System.Text.Json.Nodes;

namespace CopilotStudioClientSample;

internal class ChatConsoleService(CopilotClient copilotClient) : IHostedService
{
    public async Task StartAsync(CancellationToken cancellationToken)
    {
        System.Diagnostics.Stopwatch sw = System.Diagnostics.Stopwatch.StartNew();
        Console.Write("\nagent> ");

        await foreach (Activity act in copilotClient.StartConversationAsync(emitStartConversationEvent: true, cancellationToken: cancellationToken))
        {
            System.Diagnostics.Trace.WriteLine($">>>>MessageLoop Duration: {sw.Elapsed.ToDurationString()}");
            sw.Restart();
            if (act is null) throw new InvalidOperationException("Activity is null");

            await PrintActivityAsync(act, cancellationToken);
        }

        while (!cancellationToken.IsCancellationRequested)
        {
            Console.Write("\nuser> ");
            string question = Console.ReadLine()!;
            Console.Write("\nagent> ");
            sw.Restart();
            await foreach (Activity act in copilotClient.AskQuestionAsync(question, null, cancellationToken))
            {
                System.Diagnostics.Trace.WriteLine($">>>>MessageLoop Duration: {sw.Elapsed.ToDurationString()}");
                await PrintActivityAsync(act, cancellationToken);
                sw.Restart();
            }
        }

        sw.Stop();
    }

private async Task PrintActivityAsync(IActivity act, CancellationToken cancellationToken)
{
    switch (act.Type)
    {
        case "message":
            Console.WriteLine("\n" + act.Text);

            if (act.SuggestedActions?.Actions?.Count > 0)
            {
                Console.WriteLine("Suggested actions:\n");
                foreach (var action in act.SuggestedActions.Actions)
                    Console.WriteLine($"\t{action.Text}");
            }

            if (act.Attachments?.Count > 0)
            {
                foreach (var attachment in act.Attachments)
                {
                    if (attachment.ContentType == "application/vnd.microsoft.card.adaptive")
                    {
                        var userInput = HandleAdaptiveCard(attachment.Content);
                        if (userInput.Count > 0)
                        {
                            Console.WriteLine("\nSending your inputs to the agent...\n");

                            // Construct an Activity with the user's input
                            var userActivity = new Activity
                            {
                                Type = "message",
                                Text = JsonSerializer.Serialize(userInput),
                                From = new ChannelAccount { Id = "user", Name = "User" },
                                Recipient = new ChannelAccount { Id = "bot", Name = "Bot" },
                                Conversation = act.Conversation,
                                ReplyToId = act.Id
                            };

                            await foreach (var followUp in copilotClient.AskQuestionAsync(userActivity, cancellationToken))
                            {
                                await PrintActivityAsync(followUp, cancellationToken);
                            }
                        }
                    }
                }
            }

            break;

        case "typing":
            Console.Write(".");
            break;

        case "event":
            Console.Write("+");
            break;

        default:
            Console.Write($"[{act.Type}]");
            break;
    }
}


    private static Dictionary<string, object> HandleAdaptiveCard(object content)
    {
        var inputs = new Dictionary<string, object>();
        var cardJson = content as JsonObject ?? JsonNode.Parse(content?.ToString()) as JsonObject;

        if (cardJson?["body"] is not JsonArray body)
        {
            Console.WriteLine("[!] Adaptive Card body is missing or malformed.");
            return inputs;
        }

        foreach (var item in body.OfType<JsonObject>())
        {
            var type = item["type"]?.ToString();
            var id = item["id"]?.ToString();
            if (string.IsNullOrWhiteSpace(id)) continue;

            var label = item["label"]?.ToString() ?? item["placeholder"]?.ToString() ?? id;

            switch (type)
            {
                case "Input.Text":
                    Console.Write($"{label}: ");
                    inputs[id] = Console.ReadLine();
                    break;

                case "Input.Number":
                    Console.Write($"{label} (number): ");
                    if (int.TryParse(Console.ReadLine(), out int numberValue))
                        inputs[id] = numberValue;
                    break;

                case "Input.ChoiceSet":
                    var choices = item["choices"]?.AsArray();
                    if (choices != null && choices.Count > 0)
                    {
                        Console.WriteLine($"{label}:");
                        for (int i = 0; i < choices.Count; i++)
                        {
                            Console.WriteLine($"  {i + 1}. {choices[i]?["title"]?.ToString()}");
                        }

                        Console.Write("Select option number: ");
                        if (int.TryParse(Console.ReadLine(), out int selectedIndex) &&
                            selectedIndex >= 1 && selectedIndex <= choices.Count)
                        {
                            inputs[id] = choices[selectedIndex - 1]?["value"]?.ToString();
                        }
                    }
                    break;

                case "Input.Toggle":
                    Console.Write($"{label} (yes/no): ");
                    string? toggleInput = Console.ReadLine()?.Trim().ToLower();
                    inputs[id] = (toggleInput == "yes" || toggleInput == "y")
                        ? item["valueOn"]?.ToString() ?? "true"
                        : item["valueOff"]?.ToString() ?? "false";
                    break;

                case "Input.Date":
                    Console.Write($"{label} (yyyy-MM-dd): ");
                    inputs[id] = Console.ReadLine();
                    break;

                case "Input.Time":
                    Console.Write($"{label} (HH:mm): ");
                    inputs[id] = Console.ReadLine();
                    break;
            }
        }

        return inputs;
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        System.Diagnostics.Trace.TraceInformation("Stopping");
        return Task.CompletedTask;
    }
}
